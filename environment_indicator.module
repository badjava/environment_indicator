<?php

/**
 * @file
 * Enables the definition and management of environment indicators.
 */

use Drupal\environment_indicator\Plugin\Core\Entity\EnvironmentIndicator;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Implements hook_help().
 */
function environment_indicator_help($path, $arg) {
  switch ($path) {
    case 'admin/config/development/environment-indicator':
      return t('The Environment Indicator adds a coloured strip to the site informing you which environment you\'re currently in (Development, Staging Production etc). You may override these settings by adding a new environment based on the hostname being seen or with your settings.php file in each of your environments.');

    case 'admin/help#environment_indicator':
      $output = '<p>' .t('The Environment Indicator adds a coloured strip to the site informing you which environment you\'re currently in (Development, Staging Production etc') .'</p>';
      
      $output .= '<p>'. t('The Environment Indicator <a href="@settings">settings page</a> allows you to modify some elements of the indicator\'s behavior and appearance. Since the appearance of the indicator is dependent on your site theme, substantial customisations require modifications to your site\'s theme and CSS files.', array('@settings' => url('admin/config/development/environment-indicator'))) . '</p>';
      
      $output .= '<p>'. t('The Environment Indicator\'s visibility depends upon the permissions of the viewer. The <a href="@permissions">access environment indicator</a> permission must be enabled for a user role in order for users of that role to see the indicator.', array('@permissions' => url('admin/people/permissions', array('fragment' => 'module-environment_indicator')))) .'</p>';
      
      $output .= '<p>'. t('The settings for the Environment Indicator, such as the text to display and the color can be overridden for each of your specific environments using the configuration UI or in the site\'s settings.php file. You can also export this configuration to code, this allows you to customise the indicator for each environment without needing to make any changes in the database. This means that the Environment Indicator will always display correctly when moving your site from development to staging to production. If you choose to detect your environment using settings.php, then all configuration variables can be overridden in settings.php, but the most common three are:') .'</p>';
      $output .= '<dl>';
      $output .= '<dt><em>environment_indicator_overwrite</em></dt><dd>'. t('A boolean value indicating whether the Environment Indicator should use the settings.php variables for the indicator. On your production environment, you should probably set this to FALSE.') . '<br/>$conf[\'environment_indicator_overwrite\'] = FALSE;<br />* ' . t('This setting corresponds to the old %setting in version 1.x.', array('%setting' => 'environment_indicator_enabled')) . '</dd></dt>';
      $output .= '<dt><em>environment_indicator_overwritten_name</em></dt><dd>'. t('The text that will be displayed on the indicator.') . '<br/>$conf[\'environment_indicator_overwritten_name\'] = \'Staging\';<br />* ' . t('This setting corresponds to the old %setting in version 1.x.', array('%setting' => 'environment_indicator_text')) . '</dd></dt>';
      $output .= '<dt><em>environment_indicator_overwritten_color</em></dt><dd>'. t('A valid css color.') . '<br/>$conf[\'environment_indicator_overwritten_color\'] = \'#F55\';<br />* ' . t('This setting corresponds to the old %setting in version 1.x.', array('%setting' => 'environment_indicator_color')) . '</dd></dt>';
      $output .= '<dt><em>environment_indicator_overwritten_position</em></dt><dd>'. t('Where your indicator may appear. Allowed values are "top" and "bottom".') . '<br/>$conf[\'environment_indicator_overwritten_position\'] = \'top\';</dd></dt>';
      $output .= '<dt><em>environment_indicator_overwritten_fixed</em></dt><dd>'. t('A boolean value indicating whether the Environment Indicator should be visible at all times, fixed at the top/bottom of the screen.') . '<br/>$conf[\'environment_indicator_overwritten_fixed\'] = FALSE;</dd></dt>';
      $output .= '</dl>';
      
      return $output;
  }
}

/**
 * Implements hook_library_info().
 */
function environment_indicator_library_info() {
  // Declare the CSS and JS.
  $path = drupal_get_path('module', 'environment_indicator');
  $libraries['drupal.environment_indicator'] = array(
    'title' => t('Environment Indicator'),
    'version' => '1.0',
    'js' => array(
      $path . '/environment_indicator.js' => array(),
      $path . '/color.js' => array(),
    ),
    'css' => array(
      $path . '/environment_indicator.css' => array(),
    ),
    'dependencies' => array(
      array('color', 'drupal.color'),
    ),
  );
  return $libraries;
}

/**
 * Implement hook_menu().
 */
function environment_indicator_menu() {
  $items = array();

  // Minor code reduction technique.
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer environment indicator settings'),
    'file' => 'environment_indicator.admin.inc',
  );
  // Set up the base for AJAX callbacks.
  $ajax_base = array(
    'page callback' => 'environment_indicator_ajax_callback',
    'page arguments' => array(5, 6),
    'type' => MENU_CALLBACK,
  ) + $base;

  $items['admin/config/development/environment-indicator'] = array(
    'title' => 'Environment Indicator',
    'description' => 'Manage and configure your Environment Indicators.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('environment_indicator_list_page'),
  ) + $base;

  $items['admin/config/development/environment-indicator/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  $items['admin/config/development/environment-indicator/add'] = array(
    'title' => 'Add Environment',
    'page callback' => 'environment_indicator_add_page',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;

  $items['admin/config/development/environment-indicator/manage/%environment_indicator'] = array(
    'title' => 'Edit environment indicator',
    'page callback' => 'environment_indicator_edit_page',
    'page arguments' => array(5),
  ) + $base;

  $items['admin/config/development/environment-indicator/manage/%environment_indicator/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  $items['admin/config/development/environment-indicator/manage/%environment_indicator/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('environment_indicator_delete_form', 5),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  $items['admin/config/development/environment-indicator/manage/%environment_indicator/enable'] = array(
    'title' => 'Enable an environment indicator',
  ) + $ajax_base;

  $items['admin/config/development/environment-indicator/manage/%environment_indicator/disable'] = array(
    'title' => 'Disable a environment indicator',
  ) + $ajax_base;
  
  $items['admin/config/development/environment-indicator/settings'] = array(
    'title' => 'Settings',
    'description' => 'Adjust settings for the Environment Indicator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('environment_indicator_settings'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  return $items;
}

/**
 * Environment indicator add form.
 */
function environment_indicator_add() {
  drupal_set_title(t('Add new environment'));
  $environment = entity_create('environment_indicator', array(
    // Default the new environment to the site's default language. This is the
    // most likely default value until we have better flexible settings.
    'langcode' => language_default()->id,
  ));
  return Drupal::entityManager()->getForm($environment);
}

/**
 * Implements hook_permission().
 */
function environment_indicator_permission() {
  $permissons = array(
    'administer environment indicator settings' =>  array(
      'title' => t('Administer environment_indicator settings'),
      'description' => t('Configure the environments and the colors to display.'),
    ),
    'access environment indicator' =>  array(
      'title' => t('See environment indicator'),
      'description' => t('See all the environment indicators in the site.'),
    ),
  );
  $environments = entity_list_controller('environment_indicator');
  foreach ($environments as $machine => $environment) {
    $permissons['access environment indicator ' . $environment->machine] = array(
      'title' => t('See environment indicator for %name', array('%name' => $environment->name)),
      'description' => t('See the environment indicator if the user is in the %name environment.', array('%name' => $environment->name)),
    );
  }
  // Manually add the overritten environment.
  $permissons['access environment indicator overwritten_environment'] = array(
    'title' => t('See environment indicator for the overwritten environment'),
    'description' => t('See the environment indicator if the user is in the environment defined in settings.php.'),
  );
  return $permissons;
}

/**
 * Page callback: Calls a method on an environment indicator and reloads the listing page.
 *
 * @param Drupal\environment_indicator\EnvironmentIndicator $environment
 *   The config entity being acted upon.
 * @param string $op
 *   The operation to perform, e.g., 'enable' or 'disable'.
 *
 * @return mixed
 *   Either returns the listing page as JSON, or calls drupal_goto() to
 *   redirect back to the listing page.
 */
function environment_indicator_ajax_callback(EnvironmentIndicator $environment, $op) {
  // Perform the operation.
  $environment->$op();

  // If the request is via AJAX, return the rendered list as JSON.
  if (drupal_container()->get('request')->request->get('js')) {
    $list = entity_list_controller('environment_indicator')->render();
    $commands = array(ajax_command_replace('#environment-indicator-entity-list', drupal_render($list)));
    return new JsonResponse(ajax_render($commands));
  }
  // Otherwise, redirect back to the page.
  else {
    $entity_info = entity_get_info('environment_indicator');
    drupal_goto('admin/config/development/environment-indicator');
  }
}

/**
 * Loads multiple environment indicators based on certain conditions.
 *
 * This function should be used whenever you need to load more than one
 * environment from the database. Environments are loaded into memory and will
 * not require database access if loaded again during the same page request.
 *
 * @see entity_load_multiple()
 *
 * @param array $names
 *   (optional) An array of entity IDs. If omitted, all entities are loaded.
 *
 * @return array
 *  An array of environment objects, indexed by name.
 */
function environment_indicator_load_multiple(array $names = NULL) {
  return entity_load_multiple('environment_indicator', $names);
}

/**
 * Sorts environment indicators by their weight and label.
 *
 * @param array $environments
 *   An array of \Drupal\environment_indicator\Plugin\Core\Entity\Environment objects.
 */
function environment_indicator_sort(array &$environments = array()) {
  @uasort($environments, 'Drupal\Core\Config\Entity\ConfigEntityBase::sort');
}

/**
 * Return the environment indicator entity matching an environment ID.
 *
 * @param int $name
 *   The environment indicators's ID.
 *
 * @return Drupal\environment_indicator\Plugin\Core\Entity\Environment|false
 *   The environment indicator entity, if exists, FALSE otherwise. Results are
 *   statically cached.
 */
function environment_indicator_load($name) {
  return entity_load('environment_indicator', $name);
}

/**
 * Saves an environment indicator.
 *
 * @param Drupal\environment_indicator\Plugin\Core\Entity\EnvironmentIndicator $environment_indicator
 *   The environment indicator entity to be saved.
 */
function environment_indicator_save(EnvironmentIndicator $environment) {
  return $environment->save();
}

/**
 * Deletes an environment indicator.
 *
 * @param $name
 *   An environment indicator name.
 *
 */
function environment_indicator_delete($name) {
  environment_indicator_delete_multiple(array($name));
}

/**
 * Deletes environment indicators.
 *
 * @param $names
 *   The environment indicator names.
 */
function environment_indicator_delete_multiple(array $names) {
  entity_delete_multiple('environment_indicator', $names);
}


/**
 * Implements hook_page_build().
 */
function environment_indicator_page_build(&$page) {
  $page['#attached']['library'][] = array('environment_indicator', 'drupal.environment_indicator');
  if ($match = environment_indicator_get_active()) {
    if (environment_indicator_check_access($match)) {
      if (environment_indicator_needs_js()) {
        drupal_add_js(array('environment_indicator' => array(
          'toolbar-color' => $match['color'],
          'environment-indicator-name' => $match['name'],
        )), 'setting');
      }
      else if (!(module_exists('admin_menu') && user_access('access administration menu'))) {
        environment_indicator_attach_indicator($match, $page);
      }
    }
  }
}

/**
 * Implements hook_toolbar().
 */
function environment_indicator_toolbar() {
  $items['environment_indicator'] = array(
    'tab' => array(
      'title' => t('Environment'),
      'href' => '',
      'html' => FALSE,
      'attributes' => array(
        'title' => t('Environment'),
      ),
    ),
    'tray' => array(
      '#heading' => t('Available environments'),
      'content' => array(
        '#theme' => 'item_list',
        '#items' => environment_indicator_get_environments_list(),
      ),
    ),
    'weight' => 200,
    'access' => user_access('access environment indicator'),
  );

  return $items;
}


function environment_indicator_get_environments_list() {
  $items = array();
  $environments = entity_list_controller('environment_indicator')->load();
  $destination = drupal_get_destination();
  foreach ($environments['enabled'] as $machine => $environment) {
    $items[] = array(
      '#markup' => l(t('Open in %name', array('%name' => t($environment->get('human_name')))), 'http://' . $environment->get('regexurl') . '/' . $destination['destination'], array('html' => TRUE)),
      '#wrapper_attributes' => array(
        'class' => array('environment-switcher')
      ),
    );
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function environment_indicator_theme($existing, $type, $theme, $path) {
  return array(
    'environment_indicator_indicator_name' => array(
      'variables' => array('name' => NULL),
      'file' => 'environment_indicator.theme.inc',
    ),
    'environment_indicator_indicator_bar' => array(
      'variables' => array('info' => NULL),
      'file' => 'environment_indicator.theme.inc',
    ),
    'environment_indicator_overritten_header' => array(
      'file' => 'environment_indicator.theme.inc',
    ),
  );
}

/**
 * Helper function to attach the indicator to the page.
 */
function environment_indicator_attach_indicator($environment, &$page) {
  $page['page_' . $environment['position']]['environment_indicator'] = array(
    '#theme' => 'environment_indicator_indicator_bar',
    '#info' => $environment,
  );
}

/**
 * Helper function to get the active indicator.
 */
function environment_indicator_get_active() {
  $env = &drupal_static(__FUNCTION__);
  if (isset($env)) {
    return $env;
  }
  if (_environment_indicator_is_overritten()) {
    $env = _environment_indicator_load_overritten();
  }
  else {
    $environments = entity_list_controller('environment_indicator')->load();

    $matches = array();
    foreach ($environments['enabled'] as $machine => $environment) {
      // Check if the environment record has ben disabled. Then check the regex.
      if (preg_match("/" . $environment->get('regexurl') . "/", $_SERVER['HTTP_HOST'])) {
        $matches[] = array(
          'name' => $environment->get('human_name'),
          'machine' => $environment->id(),
          'weight' => $environment->get('weight'),
          'color' => $environment->get('color'),
          'position' => $environment->get('position'),
          'fixed' => $environment->get('fixed'),
        );
      }
    }
    uasort($matches, 'drupal_sort_weight');
    $env = reset($matches);
  }
  return $env;
}

/**
 * Helper function to check access to show the indicator.
 * 
 * @param array $environment
 *   The environment info array.
 * @return boolean
 *   TRUE if the user can see the indicator.
 */
function environment_indicator_check_access($environment) {
  // Do not show the indicator on select pages.
  $off_pages = variable_get('environment_indicator_suppress_pages', "");
  $path = current_path();
  $path_alias = drupal_container()->get('path.alias_manager.cached')->getPathAlias($path);

  // Compare with the internal and path alias (if any).
  $page_match = drupal_match_path($path_alias, $off_pages);
  if ($path_alias != current_path()) {
    $page_match = $page_match || drupal_match_path(current_path(), $off_pages);
  }
  if ($page_match) {
    return FALSE;
  }

  return user_access('access environment indicator') || user_access('access environment indicator ' . $environment['machine']);
}

/**
 * Helper function to check if the JS needs to be included.
 * 
 * @return boolean
 *   TRUE if the extra javascript is needed.
 */
function environment_indicator_needs_js() {
  return module_exists('toolbar') && user_access('access toolbar');
}

/**
 * Helper function to load the overwritten indicator.
 * 
 * @return array
 *   Environment info array.
 */
function _environment_indicator_load_overritten() {
  // TODO: Need to be updated
  $env = &drupal_static(__FUNCTION__);
  if (isset($env)) {
    return $env;
  }
  $env = array(
    'machine' => 'overwritten_environment',
    'name' => variable_get('environment_indicator_overwritten_name', variable_get('environment_indicator_text', t('Default environment.'))),
    'weight' => -99,
    'color' => variable_get('environment_indicator_overwritten_color', variable_get('environment_indicator_color', '#F55')),
    'position' => variable_get('environment_indicator_overwritten_position', 'top'),
    'fixed' => variable_get('environment_indicator_overwritten_fixed', FALSE),
  );
  if (_environment_indicator_has_old_vars() && environment_indicator_check_access($env)) {
    drupal_set_message(t('You have old configuration for the Evironment Indicator. Please check the !report for instruction on how to correct this.', array('!report' => l(t('status report'), 'admin/reports/status'))), 'warning');
  }
  return $env;
}

/**
 * Helper function to determine if there is an overwritten indicator.
 */
function _environment_indicator_is_overritten() {
  return variable_get('environment_indicator_enabled', FALSE) || variable_get('environment_indicator_overwrite', FALSE);
}

/**
 * Helper function to determine if 7.x-1.x variables are present.
 */
function _environment_indicator_has_old_vars() {
  $color = !is_null(variable_get('environment_indicator_color', NULL));
  $enabled = !is_null(variable_get('environment_indicator_enabled', NULL));
  $name = !is_null(variable_get('environment_indicator_text', NULL));
  return $color || $enabled || $name;
}
